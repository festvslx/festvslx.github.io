{"meta":{"title":"festvslx","subtitle":null,"description":null,"author":"festvslx","url":"http://yoursite.com","root":"/"},"pages":[{"title":"标签","date":"2019-07-15T06:47:02.000Z","updated":"2019-07-15T07:29:40.302Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-07-15T13:07:33.000Z","updated":"2019-07-15T13:08:52.477Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-07-15T06:56:37.000Z","updated":"2019-07-15T13:00:58.280Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"小小的菜鸟"}],"posts":[{"title":"Java基础学习(一)","slug":"Java基础学习-一","date":"2019-07-16T15:21:01.000Z","updated":"2019-07-16T15:28:15.697Z","comments":true,"path":"2019/07/16/Java基础学习-一/","link":"","permalink":"http://yoursite.com/2019/07/16/Java基础学习-一/","excerpt":"Java基础学习（一） 1. Java的八大基本数据类型 byte 8位，有符号。 short 16位，有符号。 int 32位，有符号。","text":"Java基础学习（一） 1. Java的八大基本数据类型 byte 8位，有符号。 short 16位，有符号。 int 32位，有符号。 long 64位，有符号，数字后L。 float 单精度，32位，不能表示精确的值（数字后有f） double 双精度，64位，不能表示精确的值（数字后有d） boolean 1位，仅true和false，默认为false char 单一的 16 位 Unicode 字符。 注意：数值类型的基本类型的取值范围都已经以常量的形式定义在对应的包装类中了，无需记忆。 2. 运算符 操作符 描述 ＆ 如果相对应位都是1，则结果为1，否则为0 | 如果相对应位都是0，则结果为0，否则为1 ^ 如果相对应位值相同，则结果为0，否则为1 ~ 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 &lt;&lt; 按位左移运算符。左操作数按位左移右操作数指定的位数。 &gt;&gt; 按位右移运算符。左操作数按位右移右操作数指定的位数。 &gt;&gt;&gt; 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 &amp;&amp; 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。 || 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 ! 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 短路逻辑运算符当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。 非短路逻辑运算符非短路运算符不管第一个表达式是否可以得出最后结果,都要对第二个表达式进行判断. 所以 短路运算符只能用于逻辑表达式内，非短路运算符可用于位表达式和逻辑表达式内。也可以说：短路运算只能操作布尔型的，而非短路运算不仅可以操作布尔型，而且可以操作数值型。 也可以看出短路运算符的效率更高。 3. 循环java的循环选择结构和C语言相似，但是也有不一样的地方。 for循环的加强Java5 引入了一种主要用于数组的增强型 for 循环。Java 增强 for 循环语法格式如下: 1234for(声明语句 : 表达式)&#123; //代码句子&#125; 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环* 语句块，其值与此时数组元素的值相等。表达式：表达式是要访问的数组名，或者是返回值为数组的方法。 1234567891011121314部分代码例子1：int [] numbers = &#123;1, 2, 3, 4, 5&#125;; for(int x : numbers )&#123; System.out.print( x + \",\"); &#125;运行结果： 1,2,3,4,5,部分代码例子2：String [] n =&#123;\"n\", \"a\", \"m\", \"e\"&#125;; for( String n : n ) &#123; System.out.print( n + \",\"); &#125;运行结果： n,a,m,e, Java在这方面的加强有点类似python的for语句的用法。 4. 参考文献https://www.runoob.com","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"基础","slug":"Java/基础","permalink":"http://yoursite.com/categories/Java/基础/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"markdown基本语法","slug":"markdown基本语法","date":"2019-07-15T02:56:49.000Z","updated":"2019-07-15T13:11:49.365Z","comments":true,"path":"2019/07/15/markdown基本语法/","link":"","permalink":"http://yoursite.com/2019/07/15/markdown基本语法/","excerpt":"markdown 基本教程第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。","text":"markdown 基本教程第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。 1. 标题 在markdown中几级标题就在前方加#符号即可，注意要有空格。 # 这是一级标题 ## 这是二级标题 ### 这是三级标题2. 换行 段落的换行是使用两个以上空格加上回车。 3. 字体 加粗 要加粗的在加粗部分前后用两个*号包起来。 斜体 要变斜体的用一个*号包起来。 斜体加粗 要斜体加粗的用三个*号包起来。 删除线 要删除线在前后用两个~~包起来。1234**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下：这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 4. 代码块 一段代码可以用反引号包起来表示 代码前加上制表符或者4个空格即可表示代码区块 也可以用3个反引号来表示一个区域的代码块12345`print(&quot;hello world!&quot;)`(```)代码。。。。(```)注意这个括号没有只是为了防止转译 5. 区块 Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： 12&gt;区块内容&gt;区块内容 6. 链接 链接的用法是 -&gt;[链接名称](链接地址) 7. 图片 图片的用法如下 12![alt 属性文本](图片地址 &quot;可选标题&quot;)其中alt属性文本就是图片下面的文字，相当于图片的解释 8. 列表8.1 有序列表 有序列表直接用数字加上.号表示（有空格）8.2 无序列表 无序列表使用星号*、加号+或是减号-作为列表标记：8.3 嵌套列表 嵌套列表只需在子列表前加4个空格。 9. 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用-来分隔表头和其他行。 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 效果如下：| 表头 | 表头 || —— | —— || 单元格 | 单元格 || 单元格 | 单元格 | 10. 参考文献https://www.runoob.com/markdown/md-tutorial.htmlmarkdown还支持HTML元素，数学公式等等，这里就不谈了。","categories":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"hexo+GitHub","slug":"hexo-GitHub","date":"2019-07-14T08:58:17.000Z","updated":"2019-07-15T13:11:28.021Z","comments":true,"path":"2019/07/14/hexo-GitHub/","link":"","permalink":"http://yoursite.com/2019/07/14/hexo-GitHub/","excerpt":"hexo + github 搭建准备1. 下载node.js 和 git 2. 在cmd或者git bash下安装hexo [npm install -g hexo] 3. 安装好后即可初始化了，[hexo init (folder)]","text":"hexo + github 搭建准备1. 下载node.js 和 git 2. 在cmd或者git bash下安装hexo [npm install -g hexo] 3. 安装好后即可初始化了，[hexo init (folder)] 主题更改​ 主题可以去网上搜索网上资源很多。 GitHub准备1. 首先要有GitHub账号(废话)创建一个仓库，仓库名字有规范的必须是(账号名).github.io2. 配置ssh keyssh key可以在git bash下输入ssh-keygen.exe，然后不断按回车。。。 一般公钥在c盘user里的.ssh文件夹里id_rsa.pub是公钥，id_rsa是私钥。 把公钥放到GitHub里就好。3. 配置文件配置_config.yml中有关deploy的部分改为下面即可 deploy: type: git repository: git@github.com:(账号名)/(账号名).github.io.git branch: master 上传上传前先安装一个插件 在git 下输入 npm install hexo-deployer-git --save 然后就可以输入hexo d上传到GitHub上了 参考文献www.codesheep.com","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]}]}