<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>festvslx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-17T15:23:24.926Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>festvslx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未解之谜</title>
    <link href="http://yoursite.com/2019/07/17/%E6%9C%AA%E8%A7%A3%E4%B9%8B%E8%B0%9C/"/>
    <id>http://yoursite.com/2019/07/17/未解之谜/</id>
    <published>2019-07-17T15:21:47.000Z</published>
    <updated>2019-07-17T15:23:24.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="未解之谜"><a href="#未解之谜" class="headerlink" title="未解之谜"></a>未解之谜</h3><p>今天eclipse出了问题，说找不到jre。然后我在cmd下输入java，发现没用，所以我去看了看环境变量，按照网上的去改，改了半天发现还是没用，就改了回去，绝望中在cmd下输入了java，竟然有用了。。。。。。。。。<br>eclipse的问题也找到了，我安装的32为jdk，eclipse用的64位。<br>我清晰的记得我下载eclipse后还写了个helloworld，并且运行成功了。（菜）<br>。。。。。。。。。。。(=′ー`)<br>现在却变成了这样，我肯定我没改jdk，现在却变了。(＠_＠;)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;未解之谜&quot;&gt;&lt;a href=&quot;#未解之谜&quot; class=&quot;headerlink&quot; title=&quot;未解之谜&quot;&gt;&lt;/a&gt;未解之谜&lt;/h3&gt;&lt;p&gt;今天eclipse出了问题，说找不到jre。然后我在cmd下输入java，发现没用，所以我去看了看环境变量，按照网上的去改，
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(二)</title>
    <link href="http://yoursite.com/2019/07/17/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/07/17/Java基础学习-二/</id>
    <published>2019-07-17T15:09:22.000Z</published>
    <updated>2019-07-17T15:10:55.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习-二"><a href="#Java基础学习-二" class="headerlink" title="Java基础学习(二)"></a>Java基础学习(二)</h1><h2 id="Java字符串"><a href="#Java字符串" class="headerlink" title="Java字符串"></a>Java字符串</h2><p>Java中字符串属于对象，有专门的String类来创建和操作字符串。<br>当然Java中也有字符数组，和C语言一样。<br>String对象和其他对象一样，用关键字进行创建操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span>[] hello = &#123; <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">      String hellos = <span class="keyword">new</span> String(hello);  </span><br><span class="line">      System.out.println( hellos );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>当然Java也提供了一些方法来让字符数组与字符串相互转换。<br>使用String.valueOf()将字符数组转换成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> [] a = &#123;<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>&#125;;</span><br><span class="line">String s = String.valueOf(a);</span><br></pre></td></tr></table></figure><p>使用.toCharArray()将字符串转换成字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">char</span>[] a = s.toCharArray();</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了.</p><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s = <span class="string">"helloworld"</span>;</span><br><span class="line"><span class="keyword">int</span> lens = s.length();</span><br><span class="line">System.out.println(<span class="string">"长度为："</span>lens);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h3><p>字符串的连接有两种方法</p><ul><li>.concat()  语法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string1.concat(string2)</span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringadd</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line">s = s.concat(<span class="string">"world!"</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： helloworld!</span></span><br></pre></td></tr></table></figure><ul><li><code>+</code> 操作符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接加起来就好，和python一样，代码。。。被吃了(躺)。</span></span><br><span class="line"><span class="comment">//+操作符的功能很强大，可以把任何类型数据连接起来，不局限于字符串。</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：这两种方法还是有区别的。</p><p><strong>字符串还有很多方法，这里就说了重要的几点，其他就不一一赘述了。</strong></p><h2 id="Java-StringBuffer-和-StringBuilder-类"><a href="#Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="Java StringBuffer 和 StringBuilder 类"></a>Java StringBuffer 和 StringBuilder 类</h2><p>上面记录了String创建后就不可以改变的性质，但是我们常常需要对字符串进行修改，这时就要上面的类了。<br>*StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象，StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。 (摘自<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a>) *</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础学习-二&quot;&gt;&lt;a href=&quot;#Java基础学习-二&quot; class=&quot;headerlink&quot; title=&quot;Java基础学习(二)&quot;&gt;&lt;/a&gt;Java基础学习(二)&lt;/h1&gt;&lt;h2 id=&quot;Java字符串&quot;&gt;&lt;a href=&quot;#Java字符串&quot; class=&quot;headerlink&quot; title=&quot;Java字符串&quot;&gt;&lt;/a&gt;Java字符串&lt;/h2&gt;&lt;p&gt;Java中字符串属于对象，有专门的String类来创建和操作字符串。&lt;br&gt;当然Java中也有字符数组，和C语言一样。&lt;br&gt;String对象和其他对象一样，用关键字进行创建操作。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Strings&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] hello = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String hellos = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(hello);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.println( hellos );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(一)</title>
    <link href="http://yoursite.com/2019/07/16/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/16/Java基础学习-一/</id>
    <published>2019-07-16T15:21:01.000Z</published>
    <updated>2019-07-16T15:28:15.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习（一）"><a href="#Java基础学习（一）" class="headerlink" title="Java基础学习（一）"></a>Java基础学习（一）</h1><hr><h2 id="1-Java的八大基本数据类型"><a href="#1-Java的八大基本数据类型" class="headerlink" title="1. Java的八大基本数据类型"></a>1. Java的八大基本数据类型</h2><ul><li>byte<br>  8位，有符号。</li><li>short<br>  16位，有符号。</li><li>int<br>  32位，有符号。<a id="more"></a></li><li>long<br>  64位，有符号，数字后L。</li><li>float<br>  单精度，32位，不能表示精确的值（数字后有f）</li><li>double<br>  双精度，64位，不能表示精确的值（数字后有d）</li><li>boolean<br>  1位，仅true和false，默认为false</li><li>char<br>  单一的 16 位 Unicode 字符。</li></ul><p>注意：数值类型的基本类型的取值范围都已经以常量的形式定义在对应的包装类中了，无需记忆。</p><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>＆</td><td>如果相对应位都是1，则结果为1，否则为0</td></tr><tr><td>|</td><td>如果相对应位都是0，则结果为0，否则为1</td></tr><tr><td>^</td><td>如果相对应位值相同，则结果为0，否则为1</td></tr><tr><td>~</td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td></tr><tr><td>&lt;&lt;</td><td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td></tr><tr><td>&gt;&gt;</td><td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td></tr><tr><td>&gt;&gt;&gt;</td><td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td></tr><tr><td>||</td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td></tr></tbody></table><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><h3 id="非短路逻辑运算符"><a href="#非短路逻辑运算符" class="headerlink" title="非短路逻辑运算符"></a>非短路逻辑运算符</h3><p>非短路运算符不管第一个表达式是否可以得出最后结果,都要对第二个表达式进行判断.  </p><p>所以 短路运算符只能用于逻辑表达式内，非短路运算符可用于位表达式和逻辑表达式内。也可以说：短路运算只能操作布尔型的，而非短路运算不仅可以操作布尔型，而且可以操作数值型。</p><p>也可以看出短路运算符的效率更高。</p><h2 id="3-循环"><a href="#3-循环" class="headerlink" title="3. 循环"></a>3. 循环</h2><p>java的循环选择结构和C语言相似，但是也有不一样的地方。</p><h4 id="for循环的加强"><a href="#for循环的加强" class="headerlink" title="for循环的加强"></a>for循环的加强</h4><p>Java5 引入了一种主要用于数组的增强型 for 循环。<br>Java 增强 for 循环语法格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环*  语句块，其值与此时数组元素的值相等。<br>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">部分代码例子<span class="number">1</span>：</span><br><span class="line"><span class="keyword">int</span> [] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x + <span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">运行结果： <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">部分代码例子<span class="number">2</span>：</span><br><span class="line">String [] n =&#123;<span class="string">"n"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"e"</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String n : n ) &#123;</span><br><span class="line">         System.out.print( n + <span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">运行结果： n,a,m,e,</span><br></pre></td></tr></table></figure><p><del>Java在这方面的加强有点类似python的for语句的用法。</del></p><h2 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4. 参考文献"></a>4. 参考文献</h2><p><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础学习（一）&quot;&gt;&lt;a href=&quot;#Java基础学习（一）&quot; class=&quot;headerlink&quot; title=&quot;Java基础学习（一）&quot;&gt;&lt;/a&gt;Java基础学习（一）&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-Java的八大基本数据类型&quot;&gt;&lt;a href=&quot;#1-Java的八大基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. Java的八大基本数据类型&quot;&gt;&lt;/a&gt;1. Java的八大基本数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;byte&lt;br&gt;  8位，有符号。&lt;/li&gt;
&lt;li&gt;short&lt;br&gt;  16位，有符号。&lt;/li&gt;
&lt;li&gt;int&lt;br&gt;  32位，有符号。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://yoursite.com/2019/07/15/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/15/markdown基本语法/</id>
    <published>2019-07-15T02:56:49.000Z</published>
    <updated>2019-07-15T13:11:49.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-基本教程"><a href="#markdown-基本教程" class="headerlink" title="markdown 基本教程"></a>markdown 基本教程</h1><p>第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。</p><a id="more"></a><hr><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>   在markdown中几级标题就在前方加#符号即可，注意要有空格。</p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题</code></pre><h2 id="2-换行"><a href="#2-换行" class="headerlink" title="2. 换行"></a>2. 换行</h2><p>   段落的换行是使用两个以上空格加上回车。</p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><ul><li>加粗<br> 要加粗的在加粗部分前后用两个*号包起来。</li><li>斜体<br> 要变斜体的用一个*号包起来。</li><li>斜体加粗<br> 要斜体加粗的用三个*号包起来。</li><li>删除线<br> 要删除线在前后用两个~~包起来。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure></li></ul><p>效果如下：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h2 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4. 代码块"></a>4. 代码块</h2><ul><li>一段代码可以用反引号包起来表示</li><li>代码前加上制表符或者4个空格即可表示代码区块</li><li>也可以用3个反引号来表示一个区域的代码块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`print(&quot;hello world!&quot;)`</span><br><span class="line">(```)</span><br><span class="line">代码。。。。</span><br><span class="line">(```)</span><br><span class="line">注意这个括号没有只是为了防止转译</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-区块"><a href="#5-区块" class="headerlink" title="5. 区块"></a>5. 区块</h2><p>   Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;区块内容</span><br><span class="line">&gt;区块内容</span><br></pre></td></tr></table></figure><h2 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h2><p>   链接的用法是 -&gt;<code>[链接名称](链接地址)</code></p><h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h2><p>   图片的用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line">其中alt属性文本就是图片下面的文字，相当于图片的解释</span><br></pre></td></tr></table></figure><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8. 列表"></a>8. 列表</h2><p>8.1  有序列表<br>    有序列表直接用数字加上<code>.</code>号表示（有空格）<br>8.2  无序列表<br>    无序列表使用星号<code>*</code>、加号<code>+</code>或是减号<code>-</code>作为列表标记：<br>8.3 嵌套列表<br>    嵌套列表只需在子列表前加4个空格。</p><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9. 表格"></a>9. 表格</h2><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：<br>| 表头   | 表头   |<br>| —— | —— |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |</p><hr><h2 id="10-参考文献"><a href="#10-参考文献" class="headerlink" title="10. 参考文献"></a>10. 参考文献</h2><h2 id="https-www-runoob-com-markdown-md-tutorial-html"><a href="#https-www-runoob-com-markdown-md-tutorial-html" class="headerlink" title="https://www.runoob.com/markdown/md-tutorial.html"></a><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></h2><p>markdown还支持HTML元素，数学公式等等，这里就不谈了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown-基本教程&quot;&gt;&lt;a href=&quot;#markdown-基本教程&quot; class=&quot;headerlink&quot; title=&quot;markdown 基本教程&quot;&gt;&lt;/a&gt;markdown 基本教程&lt;/h1&gt;&lt;p&gt;第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub</title>
    <link href="http://yoursite.com/2019/07/14/hexo-GitHub/"/>
    <id>http://yoursite.com/2019/07/14/hexo-GitHub/</id>
    <published>2019-07-14T08:58:17.000Z</published>
    <updated>2019-07-15T13:11:28.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-github"><a href="#hexo-github" class="headerlink" title="hexo + github"></a>hexo + github</h1><hr><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><pre><code>1. 下载node.js 和 git 2. 在cmd或者git bash下安装hexo [npm install -g hexo]3. 安装好后即可初始化了，[hexo init  (folder)]</code></pre><hr><a id="more"></a><hr><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><p>​        主题可以去网上搜索网上资源很多。</p><hr><h2 id="GitHub准备"><a href="#GitHub准备" class="headerlink" title="GitHub准备"></a>GitHub准备</h2><h3 id="1-首先要有GitHub账号-废话"><a href="#1-首先要有GitHub账号-废话" class="headerlink" title="1. 首先要有GitHub账号(废话)"></a>1. 首先要有GitHub账号(废话)</h3><pre><code>创建一个仓库，仓库名字有规范的必须是(账号名).github.io</code></pre><h3 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2. 配置ssh key"></a>2. 配置ssh key</h3><pre><code>ssh key可以在git bash下输入ssh-keygen.exe，然后不断按回车。。。        一般公钥在c盘user里的.ssh文件夹里id_rsa.pub是公钥，id_rsa是私钥。        把公钥放到GitHub里就好。</code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><pre><code>配置_config.yml中有关deploy的部分改为下面即可    deploy:        type: git        repository: git@github.com:(账号名)/(账号名).github.io.git        branch: master</code></pre><hr><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><pre><code>上传前先安装一个插件在git 下输入 npm install hexo-deployer-git --save然后就可以输入hexo d上传到GitHub上了</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.com" target="_blank" rel="noopener">www.codesheep.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-github&quot;&gt;&lt;a href=&quot;#hexo-github&quot; class=&quot;headerlink&quot; title=&quot;hexo + github&quot;&gt;&lt;/a&gt;hexo + github&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建准备&quot;&gt;&lt;a href=&quot;#搭建准备&quot; class=&quot;headerlink&quot; title=&quot;搭建准备&quot;&gt;&lt;/a&gt;搭建准备&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 下载node.js 和 git 
2. 在cmd或者git bash下安装hexo [npm install -g hexo]
3. 安装好后即可初始化了，[hexo init  (folder)]&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
