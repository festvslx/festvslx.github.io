<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>festvslx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-05T14:03:46.635Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>festvslx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android初识——Activity</title>
    <link href="http://yoursite.com/2019/11/05/Android%E5%88%9D%E8%AF%86%E2%80%94%E2%80%94Activity/"/>
    <id>http://yoursite.com/2019/11/05/Android初识——Activity/</id>
    <published>2019-11-05T13:40:35.000Z</published>
    <updated>2019-11-05T14:03:46.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-初识-——Activity"><a href="#Android-初识-——Activity" class="headerlink" title="Android 初识 ——Activity"></a>Android 初识 ——Activity</h1><hr><h2 id="1-Android的四大组件"><a href="#1-Android的四大组件" class="headerlink" title="1. Android的四大组件"></a>1. Android的四大组件</h2><ul><li>活动（activity）<br>  用于表现功能</li><li>服务（service），<br>  后台运行服务，不提供界面呈现</li><li>广播接受者（Broadcast Receive）<br>  接收广播</li><li>内容提供者（Content Provider）<br>  支持多个应用中存储和读取数据，相当于数据库</li></ul><a id="more"></a><hr><h2 id="2-Activity"><a href="#2-Activity" class="headerlink" title="2. Activity"></a>2. Activity</h2><p>Activity是Android的四大组件之一。是用户操作的可视化界面；它为用户提供了一个完成操作指令的窗口。当我们创建完毕Activity之后，需要调用setContentView()方法来完成界面的显示；以此来为用户提供交互的入口。在Android App 中只要能看见的几乎都要依托于Activity，所以Activity是在开发中使用最频繁的一种组件。</p><ul><li><p><strong>Android应用中每一个Activity都必须要在AndroidManifest.xml配置文件中声明，否则系统将不识别也不执行该Activity。</strong></p></li><li><p><strong>一个Activity通常就是一个单独的窗口</strong></p></li><li><p><strong>Activity跳转要靠Intent，数据传输也要靠它，数据传输时也可以把数据放到Bundle里，在放到Intent里(即putExtras(Bundle bundle)方法)</strong></p></li></ul><h2 id="3-简单的UI组件用法图-Button与Fragment-（个人见解）"><a href="#3-简单的UI组件用法图-Button与Fragment-（个人见解）" class="headerlink" title="3. 简单的UI组件用法图(Button与Fragment)（个人见解）"></a>3. 简单的UI组件用法图(Button与Fragment)（个人见解）</h2><p><img src="/2019/11/05/Android初识——Activity/Android_Activity.png" alt="个人见解"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-初识-——Activity&quot;&gt;&lt;a href=&quot;#Android-初识-——Activity&quot; class=&quot;headerlink&quot; title=&quot;Android 初识 ——Activity&quot;&gt;&lt;/a&gt;Android 初识 ——Activity&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-Android的四大组件&quot;&gt;&lt;a href=&quot;#1-Android的四大组件&quot; class=&quot;headerlink&quot; title=&quot;1. Android的四大组件&quot;&gt;&lt;/a&gt;1. Android的四大组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;活动（activity）&lt;br&gt;  用于表现功能&lt;/li&gt;
&lt;li&gt;服务（service），&lt;br&gt;  后台运行服务，不提供界面呈现&lt;/li&gt;
&lt;li&gt;广播接受者（Broadcast Receive）&lt;br&gt;  接收广播&lt;/li&gt;
&lt;li&gt;内容提供者（Content Provider）&lt;br&gt;  支持多个应用中存储和读取数据，相当于数据库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Activity" scheme="http://yoursite.com/categories/Android/Activity/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题</title>
    <link href="http://yoursite.com/2019/07/28/leetcode%E5%88%B7%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/28/leetcode刷题/</id>
    <published>2019-07-28T13:26:44.000Z</published>
    <updated>2019-07-28T13:29:51.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode算法题"><a href="#leetcode算法题" class="headerlink" title="leetcode算法题"></a>leetcode算法题</h1><hr><h2 id="258-各位相加"><a href="#258-各位相加" class="headerlink" title="258.各位相加"></a>258.各位相加</h2><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: 38</span><br><span class="line">输出: 2 </span><br><span class="line">解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</span><br><span class="line">----------</span><br><span class="line">进阶:</span><br><span class="line">你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</span><br></pre></td></tr></table></figure><a id="more"></a><p>第一眼看题第一个想到的是循环和递归，毕竟太有规律性了。<br>所以在进阶的地方第一眼卡住了。<br>但是仔细想想还是可以想出来的，各位相加，由于输入的数为十位数，所以满十进一。<br><strong>这个满十进一其实是将十个放到一起，看成了一个，而各位相加则仅仅加的是放到一起的数。<br>所以可以抛弃九个。</strong><br>例如：11，11相加即1+1为2，也就是因为11满了10，抛弃了9，即11-9=2，这就是结果。<br>38则不断的减3个9，38-3<em>9=11，而11再次相加为2.<br>其实可以38对9取模即可，因为大于10就就要相加。<br>*</em>但是这样的话会有一种特殊的情况即9的倍数。**<br>9的倍数各位相加应该是9然而这个方法会算到0。<br>在大佬的点拨下知道了一种方法可以统一，即先减1来打破9的倍数，最后再加一即可<br><code>(num-1)%9+1</code></p><hr><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。<br>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，<br>最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大<br>（一个节点也可以是它自己的祖先）。”<br>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]<br><img src="/2019/07/28/leetcode刷题/235.png" alt="图例"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure><p>这题利用搜索二叉树的性质十分容易，想要为节点的祖先，那么一定是再节点的两侧，不可能在一侧，否则就一定不是正确答案，答案就一定在左子树或者右子树里。<br>所以就很容易用一个递归完成，递归的出口是pq节点分布在节点的两侧。</p><hr><h2 id="226-翻转一颗二叉树"><a href="#226-翻转一颗二叉树" class="headerlink" title="226.翻转一颗二叉树"></a>226.翻转一颗二叉树</h2><p>翻转一颗二叉树<br>翻转二叉树仅需利用递归把左右子节点交换即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode算法题&quot;&gt;&lt;a href=&quot;#leetcode算法题&quot; class=&quot;headerlink&quot; title=&quot;leetcode算法题&quot;&gt;&lt;/a&gt;leetcode算法题&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;258-各位相加&quot;&gt;&lt;a href=&quot;#258-各位相加&quot; class=&quot;headerlink&quot; title=&quot;258.各位相加&quot;&gt;&lt;/a&gt;258.各位相加&lt;/h2&gt;&lt;p&gt;给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。&lt;br&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: 38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;进阶:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/leetcode/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习(一)</title>
    <link href="http://yoursite.com/2019/07/26/HTML%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/26/HTML学习-一/</id>
    <published>2019-07-26T13:18:56.000Z</published>
    <updated>2019-07-26T13:21:49.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML学习-一"><a href="#HTML学习-一" class="headerlink" title="HTML学习(一)"></a>HTML学习(一)</h1><hr><h2 id="什么是-HTML？"><a href="#什么是-HTML？" class="headerlink" title="什么是 HTML？"></a>什么是 HTML？</h2><p>HTML 是用来描述网页的一种标准标记语言。</p><ul><li>HTML 指的是超文本标记语言 (Hyper Text Markup Language)</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li><li>HTML 使用标记标签来描述网页<a id="more"></a><h2 id="HTML-标签介绍"><a href="#HTML-标签介绍" class="headerlink" title="HTML 标签介绍"></a>HTML 标签介绍</h2>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</li><li>HTML 标签是由尖括号包围的关键词，比如 <html></html></li><li>HTML 标签通常是成对出现的，比如 <b> 和 </b></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>开始和结束标签也被称为开放标签和闭合标签</li></ul><h2 id="HTML-文档"><a href="#HTML-文档" class="headerlink" title="HTML 文档"></a>HTML 文档</h2><ul><li><html> 与 </html> 之间的文本描述网页</li><li><body> 与 </body> 之间的文本是可见的页面内容</li><li><head><meta name="generator" content="Hexo 3.9.0"> 与 </head>标签用于定义文档的头部，它是所有头部元素的容器。例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档的标题(<span class="tag">&lt;<span class="name">title</span>&gt;</span> 是 head 部分中唯一必需的标签。)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    文档的内容......</span><br><span class="line">    <span class="comment">&lt;!--用来在源文档中插入注释。注释不会在浏览器中显示。--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注意&lt;!DOCTYPE&gt; 声明不是一个 HTML 标签；它是用来告知 Web 浏览器页面使用了哪种 HTML 版本。</p><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></span><br><span class="line"><span class="comment">    .... 这是条件注释，注意： 条件注释定义只针对 IE 浏览器。 ....</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用来在源文档中插入注释。注释不会在浏览器中显示。--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>标签用于定义超链接，可以让用户从一个网页跳转到另一个网页。</td></tr><tr><td>abbr</td><td>用来表示一个缩写词或者首字母缩略词</td></tr><tr><td>br</td><td>标签用于插入一个简单的换行符。<code>&lt;br /&gt;</code></td></tr><tr><td>h1~h6</td><td>可定义标题。</td></tr><tr><td>hr</td><td>标签用于在 HTML 页面中创建一条水平分隔线。</td></tr><tr><td>meta</td><td>标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。<a href="https://www.runoob.com/tags/tag-meta.html" target="_blank" rel="noopener">教程链接</a></td></tr><tr><td>p</td><td>用于定义一个段落，p 元素会自动在其前后创建一些空白。浏览器会自动添加这些空间，你也可以通过样式表进行约束。</td></tr><tr><td>style</td><td>用于为 HTML 文档定义样式信息。</td></tr><tr><td>title</td><td>标签用于定义文档的标题。</td></tr></tbody></table><p><code>&lt;a href=&quot;https://www.runoob.com/tags/tag-a.html&quot;&gt;HTML 教程&lt;/a&gt;</code>效果：<a href="https://www.runoob.com/tags/tag-a.html" target="_blank" rel="noopener">HTML 教程</a></p><p><code>&lt;abbr title=&quot;World Health Organization&quot;&gt;WHO&lt;/abbr&gt;</code>效果：<abbr title="World Health Organization">WHO</abbr></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        h1 &#123;color: red&#125;</span><br><span class="line">        p &#123;color: blue&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML学习-一&quot;&gt;&lt;a href=&quot;#HTML学习-一&quot; class=&quot;headerlink&quot; title=&quot;HTML学习(一)&quot;&gt;&lt;/a&gt;HTML学习(一)&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;什么是-HTML？&quot;&gt;&lt;a href=&quot;#什么是-HTML？&quot; class=&quot;headerlink&quot; title=&quot;什么是 HTML？&quot;&gt;&lt;/a&gt;什么是 HTML？&lt;/h2&gt;&lt;p&gt;HTML 是用来描述网页的一种标准标记语言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML 指的是超文本标记语言 (Hyper Text Markup Language)&lt;/li&gt;
&lt;li&gt;HTML 不是一种编程语言，而是一种标记语言 (markup language)&lt;/li&gt;
&lt;li&gt;标记语言是一套标记标签 (markup tag)&lt;/li&gt;
&lt;li&gt;HTML 使用标记标签来描述网页&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/HTML/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(四)</title>
    <link href="http://yoursite.com/2019/07/24/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%9B%9B/"/>
    <id>http://yoursite.com/2019/07/24/Java基础学习-四/</id>
    <published>2019-07-24T12:30:03.000Z</published>
    <updated>2019-07-24T13:38:59.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h1><hr><h2 id="类的声明定义"><a href="#类的声明定义" class="headerlink" title="类的声明定义"></a>类的声明定义</h2><p>类可以看成是创建Java对象的模板。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span></span>&#123;</span><br><span class="line">    <span class="comment">//类的成员变量</span></span><br><span class="line">    <span class="comment">//类的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>通过下面一个简单的类来理解下Java中类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am "</span> + name +<span class="string">", "</span> + age + <span class="string">" years old"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的声明"><a href="#对象的声明" class="headerlink" title="对象的声明"></a>对象的声明</h2><p><code>classname name = new classname()</code></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>这个过程是在栈内声明对象p，并且在堆里开辟空间，把堆内开辟的空间引用赋予p。</p><h2 id="对象成员的访问"><a href="#对象成员的访问" class="headerlink" title="对象成员的访问"></a>对象成员的访问</h2><p>方法为：<br><code>对象名.方法（属性）</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.age = <span class="number">20</span>;</span><br><span class="line">p.name = <span class="string">"小明"</span>;</span><br><span class="line">p.talk();</span><br></pre></td></tr></table></figure><h2 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h2><p>Java中同一个类中的2个或2个以上的方法可以一同一个名字，只是它们的参数声明不同即可，在这种情况下，该方法就被称为重载，这个过程称为方法重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am "</span> + name +<span class="string">", "</span> + age + <span class="string">" years old"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例里talk方法的参数不同，得到的结果也不同。</p><h2 id="构造方法的私有"><a href="#构造方法的私有" class="headerlink" title="构造方法的私有"></a>构造方法的私有</h2><p>方法依实际需要，可以分为public和private。同样，构造方法也有public和private之分。<br>如果设为private，那么就无法在所在类之外的地方调用。</p><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p>什么是类的封装？先看实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I am "</span> + name +<span class="string">", "</span> + age + <span class="string">" years old"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person a = <span class="keyword">new</span> Person();</span><br><span class="line">a.age = -<span class="number">19</span>;</span><br><span class="line">a.name = <span class="string">"小明"</span>;</span><br><span class="line">a.talk();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从结果可以看出这明显是个不合理的数据，所以为了避免错误得到发生，往往要把类的属性封装(private)，但是上面的代码对属性封装后程序运行出现了错误，因为age和name不可见。那么我们如何给对象赋值呢？开发者会增加setxxx(), getxxx()这样的公有方法来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I am "</span> + name +<span class="string">", "</span> + age + <span class="string">" years old"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> ages)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> &lt; ages) &amp;&amp; (ages &lt; <span class="number">119</span>)</span><br><span class="line">age = ages;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">name = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person a = <span class="keyword">new</span> Person();</span><br><span class="line">a.setName(<span class="string">"小明"</span>)；</span><br><span class="line">a.setAge(<span class="number">19</span>);</span><br><span class="line">a.talk();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。<br>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。<br><code>class 子类名 extends 父类</code><br>Java继承只能直接继承父类的公有属性和方法，隐含的继承了私有属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类</span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">person</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> schoolID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>student有三个属性：age，name，schoolID；而不是一个。<br>java中不允许一个子类继承多个父类（一个人有好几个爸妈你说行吗(っ*´Д`)っ）<br>但是允许多继承（你爷爷有了你爸，你爸有了你，你有了。。。(≧∇≦)ﾉ）</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a><br>《Java从入门到精通》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java类&quot;&gt;&lt;a href=&quot;#Java类&quot; class=&quot;headerlink&quot; title=&quot;Java类&quot;&gt;&lt;/a&gt;Java类&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;类的声明定义&quot;&gt;&lt;a href=&quot;#类的声明定义&quot; class=&quot;headerlink&quot; title=&quot;类的声明定义&quot;&gt;&lt;/a&gt;类的声明定义&lt;/h2&gt;&lt;p&gt;类可以看成是创建Java对象的模板。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//类的成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java对象创建问题</title>
    <link href="http://yoursite.com/2019/07/20/Java%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/20/Java对象创建问题/</id>
    <published>2019-07-20T06:20:54.000Z</published>
    <updated>2019-07-20T07:40:40.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的创建问题"><a href="#对象的创建问题" class="headerlink" title="对象的创建问题"></a>对象的创建问题</h1><p><strong>在Java中字符串的创建有两种方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);  <span class="comment">//第一种</span></span><br><span class="line">String s = <span class="string">"abc"</span>;              <span class="comment">//第二种</span></span><br></pre></td></tr></table></figure><ul><li>第一种new时，java会去常量池里查找是否有abc，如果没有就就在堆中创建一，有的话就会把堆中的对象指向常量池的abc，在把栈里的s指向堆里的对象(该对象指向池里查里的abc)。</li><li>第二种时，Java会在字符串池里查找有没有abc这个对象，有就返回对象的引用，没有就先创建这个对象，然后把该对象加入字符串池里，再返回该对象的引用。(字符串池由String类私有的维护)</li></ul><a id="more"></a><p><img src="/2019/07/20/Java对象创建问题/zdc1.png" alt="个人见解"></p><p>所以当new方法时，如果常量池里没有“abc”就会产生两个对象，有就产生一个。</p><p><img src="/2019/07/20/Java对象创建问题/zdc2.png" alt="个人见解"></p><hr><h2 id="字符串连接问题"><a href="#字符串连接问题" class="headerlink" title="字符串连接问题"></a>字符串连接问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题一：</span></span><br><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"a"</span> + <span class="string">"bc"</span>;</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">//问题二：</span></span><br><span class="line">String s3 = <span class="string">"a"</span>;</span><br><span class="line">String s4 = s3 + <span class="string">"bc"</span>;</span><br><span class="line">System.out.println(s4 == s1);</span><br></pre></td></tr></table></figure><p>在上面两个问题里，第一个是true；第二个是false。<br>s2 = “a”+”bc”会在常量池里查找“abc”的字符串对象，所以s2会引用s1的abc对象。所以s1会等于s2.<br>s4 = s3+“bc”因为有一个变量，所以涉及到变量的相加，相加时会产生一个新对象。所以不会相等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对象的创建问题&quot;&gt;&lt;a href=&quot;#对象的创建问题&quot; class=&quot;headerlink&quot; title=&quot;对象的创建问题&quot;&gt;&lt;/a&gt;对象的创建问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;在Java中字符串的创建有两种方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;              &lt;span class=&quot;comment&quot;&gt;//第二种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;第一种new时，java会去常量池里查找是否有abc，如果没有就就在堆中创建一，有的话就会把堆中的对象指向常量池的abc，在把栈里的s指向堆里的对象(该对象指向池里查里的abc)。&lt;/li&gt;
&lt;li&gt;第二种时，Java会在字符串池里查找有没有abc这个对象，有就返回对象的引用，没有就先创建这个对象，然后把该对象加入字符串池里，再返回该对象的引用。(字符串池由String类私有的维护)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="进阶" scheme="http://yoursite.com/categories/Java/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java栈堆常量池</title>
    <link href="http://yoursite.com/2019/07/20/Java%E6%A0%88%E5%A0%86%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <id>http://yoursite.com/2019/07/20/Java栈堆常量池/</id>
    <published>2019-07-20T06:00:45.000Z</published>
    <updated>2019-07-20T06:19:54.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈堆和常量池（浅）"><a href="#栈堆和常量池（浅）" class="headerlink" title="栈堆和常量池（浅）"></a>栈堆和常量池（浅）</h1><ol><li>JVM栈<br>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。<br>每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中 。</li><li>堆<br>存储的全部是对象，每个对象包含一个与之对应的class信息–class的目的是得到操作指令。<br>一般来说就是new出来的对象。</li><li>常量池<br>常量池在方法区里，是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</li></ol><hr><p>我在看new 和不用new时创建了几个对象时看到的这几个概念，我先记录下来，有能力再去深入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈堆和常量池（浅）&quot;&gt;&lt;a href=&quot;#栈堆和常量池（浅）&quot; class=&quot;headerlink&quot; title=&quot;栈堆和常量池（浅）&quot;&gt;&lt;/a&gt;栈堆和常量池（浅）&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;JVM栈&lt;br&gt;栈分为3个部分：基本类型变量区、执行环境上下文、操作指令
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="进阶" scheme="http://yoursite.com/categories/Java/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>休克</title>
    <link href="http://yoursite.com/2019/07/20/%E4%BC%91%E5%85%8B/"/>
    <id>http://yoursite.com/2019/07/20/休克/</id>
    <published>2019-07-20T05:47:37.000Z</published>
    <updated>2019-07-20T05:49:21.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="休克"><a href="#休克" class="headerlink" title="休克"></a>休克</h1><hr><p>18号时身体不舒服，一天都躺家里，也不想去医院，结果19号时病情加重，高烧了39度多。晚上就去了医院，生病了我有不想吃什么东西，结果输液时就因为我空腹导致了我休克。当时，我记得护士刚刚把针插上不到1分钟，我就感觉头晕，胸闷，想吐，我立马和医生说我不舒服（县级医院，晚上就几个医生值班，所以就在门口输液，旁边还有一张床，就两三步）医生赶过来就把我扶到旁边的床上休息结果我屁股还没坐上就晕过去了（医生扶我的时候我就几乎没什么意识了，因为我没有我走路的记忆），身体直挺挺的倒下去，万幸我头撞到墙上醒了过来（当时我还以为是护士把我拍醒的）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;休克&quot;&gt;&lt;a href=&quot;#休克&quot; class=&quot;headerlink&quot; title=&quot;休克&quot;&gt;&lt;/a&gt;休克&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;18号时身体不舒服，一天都躺家里，也不想去医院，结果19号时病情加重，高烧了39度多。晚上就去了医院，生病了我有不想吃什么东西，结
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础学习(三)</title>
    <link href="http://yoursite.com/2019/07/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%89/"/>
    <id>http://yoursite.com/2019/07/19/Java基础学习-三/</id>
    <published>2019-07-19T08:38:07.000Z</published>
    <updated>2019-07-19T08:40:07.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习-三"><a href="#Java基础学习-三" class="headerlink" title="Java基础学习(三)"></a>Java基础学习(三)</h1><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>什么是数组</strong><br>数组是一种最简单的复合数据类型，它是有序数据的集合，数组中的每个元素具有相同的数据类型，可以用一个统一的数组名和不同的下标来唯一确定数组中的元素。根据数组的维度，可以将其分为一维数组、二维数组和多维数组等。</p><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><pre><code>数据类型[] name = new 数据类型[长度]</code></pre><p>Java数组和C语言的数组差不多，但是功能更强大。<br>Java的数组每个元素都有默认值，默认值取决于数据类型。<br>Java数组有.length方法直接查看数组长度。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [][] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr_print(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arr_print</span><span class="params">(<span class="keyword">int</span>[][] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j++)</span><br><span class="line">System.out.print(a[i][j]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>上面的代码可以看出Java的length方法不仅可以看多少行，还可以看每行多少个。</p><h2 id="数组的空间开辟与传递"><a href="#数组的空间开辟与传递" class="headerlink" title="数组的空间开辟与传递"></a>数组的空间开辟与传递</h2><p>数组的开辟主要是将一片默认值的地址赋值给对象（未初始化）和python一样均是将地址赋值给对象，所以会有下面的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span>[] b = a;</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">" "</span>b[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>将b数组的第一个值修改后a数组的第一个值也修改了，因为<code>=</code>传递的是数组的地址。</p><h2 id="Java对数组的支持"><a href="#Java对数组的支持" class="headerlink" title="Java对数组的支持"></a>Java对数组的支持</h2><ol><li><p>排序<br> 数字升序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.Arrays.sort(arrayname)</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line">java.lang.System.arraycopy(object src, <span class="keyword">int</span> srcPos, object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length);</span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">java.util.Arrays.copyOf(arrayname, length);</span><br></pre></td></tr></table></figure></li></ol><h2 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h2><p>从数组的定义可知，数组是可以存放八大基本数据之外的数据类型，比如类。<br>初始化差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名 [] 对象数组名 = <span class="keyword">new</span> 类名[长度]；</span><br><span class="line">类名 [] 对象数组名 = <span class="keyword">new</span> 类名[] &#123;&#125;；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础学习-三&quot;&gt;&lt;a href=&quot;#Java基础学习-三&quot; class=&quot;headerlink&quot; title=&quot;Java基础学习(三)&quot;&gt;&lt;/a&gt;Java基础学习(三)&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;什么是数组&lt;/strong&gt;&lt;br&gt;数组是一种最简单的复合数据类型，它是有序数据的集合，数组中的每个元素具有相同的数据类型，可以用一个统一的数组名和不同的下标来唯一确定数组中的元素。根据数组的维度，可以将其分为一维数组、二维数组和多维数组等。&lt;/p&gt;
&lt;h2 id=&quot;数组的初始化&quot;&gt;&lt;a href=&quot;#数组的初始化&quot; class=&quot;headerlink&quot; title=&quot;数组的初始化&quot;&gt;&lt;/a&gt;数组的初始化&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;数据类型[] name = new 数据类型[长度]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Java数组和C语言的数组差不多，但是功能更强大。&lt;br&gt;Java的数组每个元素都有默认值，默认值取决于数据类型。&lt;br&gt;Java数组有.length方法直接查看数组长度。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>未解之谜</title>
    <link href="http://yoursite.com/2019/07/17/%E6%9C%AA%E8%A7%A3%E4%B9%8B%E8%B0%9C/"/>
    <id>http://yoursite.com/2019/07/17/未解之谜/</id>
    <published>2019-07-17T15:21:47.000Z</published>
    <updated>2019-07-17T15:23:24.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="未解之谜"><a href="#未解之谜" class="headerlink" title="未解之谜"></a>未解之谜</h3><p>今天eclipse出了问题，说找不到jre。然后我在cmd下输入java，发现没用，所以我去看了看环境变量，按照网上的去改，改了半天发现还是没用，就改了回去，绝望中在cmd下输入了java，竟然有用了。。。。。。。。。<br>eclipse的问题也找到了，我安装的32为jdk，eclipse用的64位。<br>我清晰的记得我下载eclipse后还写了个helloworld，并且运行成功了。（菜）<br>。。。。。。。。。。。(=′ー`)<br>现在却变成了这样，我肯定我没改jdk，现在却变了。(＠_＠;)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;未解之谜&quot;&gt;&lt;a href=&quot;#未解之谜&quot; class=&quot;headerlink&quot; title=&quot;未解之谜&quot;&gt;&lt;/a&gt;未解之谜&lt;/h3&gt;&lt;p&gt;今天eclipse出了问题，说找不到jre。然后我在cmd下输入java，发现没用，所以我去看了看环境变量，按照网上的去改，
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(二)</title>
    <link href="http://yoursite.com/2019/07/17/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/07/17/Java基础学习-二/</id>
    <published>2019-07-17T15:09:22.000Z</published>
    <updated>2019-07-19T08:41:24.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习-二"><a href="#Java基础学习-二" class="headerlink" title="Java基础学习(二)"></a>Java基础学习(二)</h1><hr><h2 id="Java字符串"><a href="#Java字符串" class="headerlink" title="Java字符串"></a>Java字符串</h2><p>Java中字符串属于对象，有专门的String类来创建和操作字符串。<br>当然Java中也有字符数组，和C语言一样。<br>String对象和其他对象一样，用关键字进行创建操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span>[] hello = &#123; <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">      String hellos = <span class="keyword">new</span> String(hello);  </span><br><span class="line">      System.out.println( hellos );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>当然Java也提供了一些方法来让字符数组与字符串相互转换。<br>使用String.valueOf()将字符数组转换成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> [] a = &#123;<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>&#125;;</span><br><span class="line">String s = String.valueOf(a);</span><br></pre></td></tr></table></figure><p>使用.toCharArray()将字符串转换成字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">char</span>[] a = s.toCharArray();</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了.</p><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s = <span class="string">"helloworld"</span>;</span><br><span class="line"><span class="keyword">int</span> lens = s.length();</span><br><span class="line">System.out.println(<span class="string">"长度为："</span>lens);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h3><p>字符串的连接有两种方法</p><ul><li>.concat()  语法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string1.concat(string2)</span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringadd</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">String s = <span class="string">"hello"</span>;</span><br><span class="line">s = s.concat(<span class="string">"world!"</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： helloworld!</span></span><br></pre></td></tr></table></figure><ul><li><code>+</code> 操作符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接加起来就好，和python一样，代码。。。被吃了(躺)。</span></span><br><span class="line"><span class="comment">//+操作符的功能很强大，可以把任何类型数据连接起来，不局限于字符串。</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：这两种方法还是有区别的。</p><p><strong>字符串还有很多方法，这里就说了重要的几点，其他就不一一赘述了。</strong></p><h2 id="Java-StringBuffer-和-StringBuilder-类"><a href="#Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="Java StringBuffer 和 StringBuilder 类"></a>Java StringBuffer 和 StringBuilder 类</h2><p>上面记录了String创建后就不可以改变的性质，但是我们常常需要对字符串进行修改，这时就要上面的类了。<br>*StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象，StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。 (摘自<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a>) *</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础学习-二&quot;&gt;&lt;a href=&quot;#Java基础学习-二&quot; class=&quot;headerlink&quot; title=&quot;Java基础学习(二)&quot;&gt;&lt;/a&gt;Java基础学习(二)&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Java字符串&quot;&gt;&lt;a href=&quot;#Java字符串&quot; class=&quot;headerlink&quot; title=&quot;Java字符串&quot;&gt;&lt;/a&gt;Java字符串&lt;/h2&gt;&lt;p&gt;Java中字符串属于对象，有专门的String类来创建和操作字符串。&lt;br&gt;当然Java中也有字符数组，和C语言一样。&lt;br&gt;String对象和其他对象一样，用关键字进行创建操作。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Strings&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] hello = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String hellos = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(hello);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.println( hellos );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(一)</title>
    <link href="http://yoursite.com/2019/07/16/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/16/Java基础学习-一/</id>
    <published>2019-07-16T15:21:01.000Z</published>
    <updated>2019-07-16T15:28:15.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习（一）"><a href="#Java基础学习（一）" class="headerlink" title="Java基础学习（一）"></a>Java基础学习（一）</h1><hr><h2 id="1-Java的八大基本数据类型"><a href="#1-Java的八大基本数据类型" class="headerlink" title="1. Java的八大基本数据类型"></a>1. Java的八大基本数据类型</h2><ul><li>byte<br>  8位，有符号。</li><li>short<br>  16位，有符号。</li><li>int<br>  32位，有符号。<a id="more"></a></li><li>long<br>  64位，有符号，数字后L。</li><li>float<br>  单精度，32位，不能表示精确的值（数字后有f）</li><li>double<br>  双精度，64位，不能表示精确的值（数字后有d）</li><li>boolean<br>  1位，仅true和false，默认为false</li><li>char<br>  单一的 16 位 Unicode 字符。</li></ul><p>注意：数值类型的基本类型的取值范围都已经以常量的形式定义在对应的包装类中了，无需记忆。</p><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>＆</td><td>如果相对应位都是1，则结果为1，否则为0</td></tr><tr><td>|</td><td>如果相对应位都是0，则结果为0，否则为1</td></tr><tr><td>^</td><td>如果相对应位值相同，则结果为0，否则为1</td></tr><tr><td>~</td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td></tr><tr><td>&lt;&lt;</td><td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td></tr><tr><td>&gt;&gt;</td><td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td></tr><tr><td>&gt;&gt;&gt;</td><td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td></tr><tr><td>||</td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td></tr></tbody></table><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><h3 id="非短路逻辑运算符"><a href="#非短路逻辑运算符" class="headerlink" title="非短路逻辑运算符"></a>非短路逻辑运算符</h3><p>非短路运算符不管第一个表达式是否可以得出最后结果,都要对第二个表达式进行判断.  </p><p>所以 短路运算符只能用于逻辑表达式内，非短路运算符可用于位表达式和逻辑表达式内。也可以说：短路运算只能操作布尔型的，而非短路运算不仅可以操作布尔型，而且可以操作数值型。</p><p>也可以看出短路运算符的效率更高。</p><h2 id="3-循环"><a href="#3-循环" class="headerlink" title="3. 循环"></a>3. 循环</h2><p>java的循环选择结构和C语言相似，但是也有不一样的地方。</p><h4 id="for循环的加强"><a href="#for循环的加强" class="headerlink" title="for循环的加强"></a>for循环的加强</h4><p>Java5 引入了一种主要用于数组的增强型 for 循环。<br>Java 增强 for 循环语法格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环*  语句块，其值与此时数组元素的值相等。<br>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">部分代码例子<span class="number">1</span>：</span><br><span class="line"><span class="keyword">int</span> [] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x + <span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">运行结果： <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">部分代码例子<span class="number">2</span>：</span><br><span class="line">String [] n =&#123;<span class="string">"n"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"e"</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String n : n ) &#123;</span><br><span class="line">         System.out.print( n + <span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">运行结果： n,a,m,e,</span><br></pre></td></tr></table></figure><p><del>Java在这方面的加强有点类似python的for语句的用法。</del></p><h2 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4. 参考文献"></a>4. 参考文献</h2><p><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java基础学习（一）&quot;&gt;&lt;a href=&quot;#Java基础学习（一）&quot; class=&quot;headerlink&quot; title=&quot;Java基础学习（一）&quot;&gt;&lt;/a&gt;Java基础学习（一）&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-Java的八大基本数据类型&quot;&gt;&lt;a href=&quot;#1-Java的八大基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. Java的八大基本数据类型&quot;&gt;&lt;/a&gt;1. Java的八大基本数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;byte&lt;br&gt;  8位，有符号。&lt;/li&gt;
&lt;li&gt;short&lt;br&gt;  16位，有符号。&lt;/li&gt;
&lt;li&gt;int&lt;br&gt;  32位，有符号。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://yoursite.com/2019/07/15/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/15/markdown基本语法/</id>
    <published>2019-07-15T02:56:49.000Z</published>
    <updated>2019-07-19T08:41:40.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-基本教程"><a href="#markdown-基本教程" class="headerlink" title="markdown 基本教程"></a>markdown 基本教程</h1><hr><p>第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。</p><a id="more"></a><hr><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>   在markdown中几级标题就在前方加#符号即可，注意要有空格。</p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题</code></pre><h2 id="2-换行"><a href="#2-换行" class="headerlink" title="2. 换行"></a>2. 换行</h2><p>   段落的换行是使用两个以上空格加上回车。</p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><ul><li>加粗<br> 要加粗的在加粗部分前后用两个*号包起来。</li><li>斜体<br> 要变斜体的用一个*号包起来。</li><li>斜体加粗<br> 要斜体加粗的用三个*号包起来。</li><li>删除线<br> 要删除线在前后用两个~~包起来。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure></li></ul><p>效果如下：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h2 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4. 代码块"></a>4. 代码块</h2><ul><li>一段代码可以用反引号包起来表示</li><li>代码前加上制表符或者4个空格即可表示代码区块</li><li>也可以用3个反引号来表示一个区域的代码块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`print(&quot;hello world!&quot;)`</span><br><span class="line">(```)</span><br><span class="line">代码。。。。</span><br><span class="line">(```)</span><br><span class="line">注意这个括号没有只是为了防止转译</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-区块"><a href="#5-区块" class="headerlink" title="5. 区块"></a>5. 区块</h2><p>   Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;区块内容</span><br><span class="line">&gt;区块内容</span><br></pre></td></tr></table></figure><h2 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h2><p>   链接的用法是 -&gt;<code>[链接名称](链接地址)</code></p><h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h2><p>   图片的用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br><span class="line">其中alt属性文本就是图片下面的文字，相当于图片的解释</span><br></pre></td></tr></table></figure><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8. 列表"></a>8. 列表</h2><p>8.1  有序列表<br>    有序列表直接用数字加上<code>.</code>号表示（有空格）<br>8.2  无序列表<br>    无序列表使用星号<code>*</code>、加号<code>+</code>或是减号<code>-</code>作为列表标记：<br>8.3 嵌套列表<br>    嵌套列表只需在子列表前加4个空格。</p><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9. 表格"></a>9. 表格</h2><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：<br>| 表头   | 表头   |<br>| —— | —— |<br>| 单元格 | 单元格 |<br>| 单元格 | 单元格 |</p><hr><h2 id="10-参考文献"><a href="#10-参考文献" class="headerlink" title="10. 参考文献"></a>10. 参考文献</h2><h2 id="https-www-runoob-com-markdown-md-tutorial-html"><a href="#https-www-runoob-com-markdown-md-tutorial-html" class="headerlink" title="https://www.runoob.com/markdown/md-tutorial.html"></a><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></h2><p>markdown还支持HTML元素，数学公式等等，这里就不谈了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown-基本教程&quot;&gt;&lt;a href=&quot;#markdown-基本教程&quot; class=&quot;headerlink&quot; title=&quot;markdown 基本教程&quot;&gt;&lt;/a&gt;markdown 基本教程&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;第一次使用markdown，所以去找了找资料，把一些基本的用法记录下来，供以后查看。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub</title>
    <link href="http://yoursite.com/2019/07/14/hexo-GitHub/"/>
    <id>http://yoursite.com/2019/07/14/hexo-GitHub/</id>
    <published>2019-07-14T08:58:17.000Z</published>
    <updated>2019-07-15T13:11:28.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-github"><a href="#hexo-github" class="headerlink" title="hexo + github"></a>hexo + github</h1><hr><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><pre><code>1. 下载node.js 和 git 2. 在cmd或者git bash下安装hexo [npm install -g hexo]3. 安装好后即可初始化了，[hexo init  (folder)]</code></pre><hr><a id="more"></a><hr><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><p>​        主题可以去网上搜索网上资源很多。</p><hr><h2 id="GitHub准备"><a href="#GitHub准备" class="headerlink" title="GitHub准备"></a>GitHub准备</h2><h3 id="1-首先要有GitHub账号-废话"><a href="#1-首先要有GitHub账号-废话" class="headerlink" title="1. 首先要有GitHub账号(废话)"></a>1. 首先要有GitHub账号(废话)</h3><pre><code>创建一个仓库，仓库名字有规范的必须是(账号名).github.io</code></pre><h3 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2. 配置ssh key"></a>2. 配置ssh key</h3><pre><code>ssh key可以在git bash下输入ssh-keygen.exe，然后不断按回车。。。        一般公钥在c盘user里的.ssh文件夹里id_rsa.pub是公钥，id_rsa是私钥。        把公钥放到GitHub里就好。</code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><pre><code>配置_config.yml中有关deploy的部分改为下面即可    deploy:        type: git        repository: git@github.com:(账号名)/(账号名).github.io.git        branch: master</code></pre><hr><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><pre><code>上传前先安装一个插件在git 下输入 npm install hexo-deployer-git --save然后就可以输入hexo d上传到GitHub上了</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.com" target="_blank" rel="noopener">www.codesheep.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-github&quot;&gt;&lt;a href=&quot;#hexo-github&quot; class=&quot;headerlink&quot; title=&quot;hexo + github&quot;&gt;&lt;/a&gt;hexo + github&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;搭建准备&quot;&gt;&lt;a href=&quot;#搭建准备&quot; class=&quot;headerlink&quot; title=&quot;搭建准备&quot;&gt;&lt;/a&gt;搭建准备&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 下载node.js 和 git 
2. 在cmd或者git bash下安装hexo [npm install -g hexo]
3. 安装好后即可初始化了，[hexo init  (folder)]&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
